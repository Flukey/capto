{"name":"Capto","tagline":"Mail catcher for NodeJs","body":"## Development email testing made easy\r\n\r\nCapto runs a simple SMTP server that captures any message sent to it, persists it into a mongodb collection and displays it in a web interface.  No messages are relayed to any email addresses. The backend is written in NodeJs using the Express framework and the frontend is driven by ExtJs 5.\r\n\r\n![Screenshot](https://raw.githubusercontent.com/jamhall/capto/master/docs/screenshots/screenshot.png)\r\n\r\n\r\n[![NPM](https://nodei.co/npm/capto.png)](https://nodei.co/npm/capto/)\r\n\r\n### Features\r\n\r\n - Catches all mail and stores it for display.\r\n - Display inline images\r\n - Get notified when a new message arrives via websockets and browser desktop notifications\r\n - Display attachment images in lightbox popup\r\n - Displays recipients and CCs\r\n - Display headers\r\n - Keyboard navigation between messages\r\n - Full text searching for messages\r\n - Shows HTML, Plain Text and Source version of messages, as applicable.\r\n - List attachments and download each attachment\r\n - Download email source\r\n - Open an email in a new tab (like thunderbird)\r\n - Post an *eml* file via the API and view it in the interface\r\n - Mark as read, delete messages and navigate messages via pagination controls\r\n - RESTful API (please see below for more information)\r\n\r\n### Installation\r\n\r\n> Capto requires a MongoDB instance. If you wish to have full text search working, you will need to be running Mongo 2.6 or greater.\r\n\r\nTo get started, install capto (may require sudo privileges):\r\n\r\n    npm install -g capto\r\n\r\nChange directory to the *node modules* directory:\r\n\r\n    cd /usr/local/lib/node_modules/capto/app/config/\r\n\r\nCopy the *settings.js.example* to *settings.js*. Modify the settings to match your requirements\r\n\r\nTo run the HTTP and SMTP server with the default options:\r\n\r\n    capto run\r\n\r\nThere are a few options you can set:\r\n\r\n```\r\n  Usage: run [options]\r\n\r\n  Options:\r\n\r\n    -h, --help                 output usage information\r\n    --smtp-ip [address]        Set the ip address for the http server\r\n    --http-ip [address]        Set the ip address for the smtp server\r\n    --smtp-port [port]         Set the port of the smtp server\r\n    --http-port [port]         Set the port of the http server\r\n    --max-message-size [size]  Set the max message size the smtp server will accept in bytes\r\n```\r\n\r\nNow open: http://localhost:9024 to view the web interface. Send messages to *smtp://127.0.0.1:9025*.\r\n\r\n> Please note: The max message size is 10mb.  You can reduce this limit by setting the appropriate option either via the command line options or in the settings file\r\n\r\n### Configuring a mail library to send messages to capto\r\n\r\n#### Django\r\n\r\nFor use in Django, simply add the following configuration to your projects' settings.py\r\n```\r\nif DEBUG:\r\n    EMAIL_HOST = '127.0.0.1'\r\n    EMAIL_HOST_USER = ''\r\n    EMAIL_HOST_PASSWORD = ''\r\n    EMAIL_PORT = 9025\r\n    EMAIL_USE_TLS = False\r\n```\r\n#### NodeJs\r\n\r\nUsing [Node mailer](https://github.com/andris9/Nodemailer)\r\n\r\n```\r\nvar nodemailer = require('nodemailer');\r\nvar smtpTransport = require('nodemailer-smtp-transport');\r\nvar transporter = nodemailer.createTransport(smtpTransport({\r\n  host: 'localhost',\r\n  port: 9025,\r\n  secure: false,\r\n  debug: true,\r\n  ignoreTLS: true\r\n}));\r\n```\r\n\r\n#### Rails\r\n\r\nTo set up your rails app, I recommend adding this to your environments/development.rb:\r\n\r\n```\r\nconfig.action_mailer.delivery_method = :smtp\r\nconfig.action_mailer.smtp_settings = { :address => \"localhost\", :port => 9025 }\r\n```\r\n### Contributions\r\n\r\nAll contributions and bug reports are very welcome!\r\n\r\n### API\r\n\r\nThe backend exposes a RESTful API:\r\n\r\nRoute  | Method  | Description\r\n------------- | ------------- | -----------\r\n/messages  | GET | Get all messages\r\n/messages     | DELETE | Delete all messages\r\n/messages     | POST | Create a message\r\n/messages/{id}|GET | Get a single message\r\n/messages/{id} | DELETE | Delete a message\r\n/messages/{id}/source |GET | Get the source of a message\r\n/messages/{id}/source.eml | GET | Download the source of a message\r\n/messages/{id}/html |GET | Get the html of a message\r\n/messages/{id}/source |GET | Get the plain text of a message\r\n/messages/{id}/attachments/{attachmentId} |GET | Get an attachment (to download append ?download to the URL)\r\n/messages/{id}/headers |GET | Get the headers for a message (for a html representation append ?html to the URL)\r\n\r\n\r\n### Thanks\r\n\r\nMany thanks to [sj26](https://github.c/sj26) for his excellent [mailcatcher](https://github.com/sj26/mailcatcher) project for the inspiration for this project.\r\n\r\nMany thanks also goes to the many developers who have contributed to the various libraries used in this project.\r\n\r\n### License\r\n\r\nGPLv3. See LICENSE file in the source.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}